"""User | Notific | Friend | Devices and UserAdmin View

Revision ID: 51ed7eb2ed1b
Revises: 
Create Date: 2024-11-09 15:14:35.997778

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "51ed7eb2ed1b"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=32), nullable=True),
        sa.Column("last_name", sa.String(length=32), nullable=True),
        sa.Column("birthday", sa.Date(), nullable=True),
        sa.Column("sex", sa.String(length=6), nullable=True),
        sa.Column("nickname", sa.String(length=39), nullable=False),
        sa.Column("email", sa.String(length=100), nullable=False),
        sa.Column("password", sa.String(length=60), nullable=False),
        sa.CheckConstraint(
            "birthday >= DATE '1900-01-01' AND birthday <= CURRENT_DATE",
            name="check_birthday_1900",
        ),
        sa.CheckConstraint("sex IN ('Male', 'Female')", name="check_gender"),
        sa.CheckConstraint("char_length(first_name) >= 2", name="min_first_name_len_2"),
        sa.CheckConstraint("char_length(nickname) >= 5", name="min_nick_len_5"),
        sa.CheckConstraint(
            "char_length(password) >= 6 OR char_length(password) = 0",
            name="min_pass_len_6",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("nickname"),
    )
    op.create_table(
        "firebaseDeviceToken",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("holder_id", sa.UUID(), nullable=False),
        sa.Column("device_token", sa.String(length=256), nullable=False),
        sa.ForeignKeyConstraint(["holder_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "friend",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("friend_id", sa.UUID(), nullable=False),
        sa.Column(
            "relationship_type",
            sa.String(length=11),
            server_default="NOT_APPROVE",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["friend_id"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "friend_id", name="pk_user_id_friend_id"),
    )
    op.create_index(
        "uq_user_id_friend_id_permuted",
        "friend",
        [
            sa.text("least(user_id, friend_id)"),
            sa.text("greatest(user_id, friend_id)"),
        ],
        unique=True,
    )
    op.create_table(
        "notification",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("sender", sa.UUID(), nullable=False),
        sa.Column("recipient", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=128), nullable=True),
        sa.Column("message", sa.String(length=500), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.String(length=6),
            server_default="UNREAD",
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["recipient"], ["user.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sender"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("notification")
    op.drop_index("uq_user_id_friend_id_permuted", table_name="friend")
    op.drop_table("friend")
    op.drop_table("firebaseDeviceToken")
    op.drop_table("user")
    # ### end Alembic commands ###
